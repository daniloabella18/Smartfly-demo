import { useState, useEffect } from 'react';

import Head from 'next/head'
import Image from 'next/image'
import { GetServerSideProps } from 'next'

import { Auth, withSSRContext } from 'aws-amplify'
import '../configureAmplify'

import styles from '../styles/Home.module.css'

const Home = (props: JSON) => {

  const [carga, setCarga] = useState<any>(false)
  const [user, setUser] = useState<any>(null)

  useEffect(() => {
    setCarga(false)
    Auth.currentAuthenticatedUser()
      .then(resp => {
        console.log("User: ", resp)
        setCarga(true)
        setUser(resp)
      })
      .catch((err) => {
        console.error("User: ", err)
        setCarga(true)
      })

  }, []);

  console.log("props: ", props)

  return (
    <div className={styles.container}>
      <Head>
        <title> Hola {user ? user.username : 'viajero'} !! </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {<main className={styles.main}>

        <h3 className={styles.title}>
          Smartfly
        </h3>

        <div className={styles.description}>
          <main className={styles.main}>
            {carga ?
              <p>  Hola {user ? user.username : 'viajero'} !! </p>
              :
              <p> Cargando... </p>
            }
          </main>
        </div>
      </main>
      }

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )

}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {

  console.log("UUUUURR")

  const Auth = await withSSRContext({ req }).Auth

  try {
    const user = await Auth.currentAuthenticatedUser();
    console.log("user: ", user)
    return {
      props: {
        authenticated: true,
        user: {
          atributes: user.attributes,
          authenticationFlowType: user.authenticationFlowType,
          pool: user.pool.userPoolId,
          accessTokenJWT: user.signInUserSession.accessToken.jwtToken,
          idTokenJWT: user.signInUserSession.idToken.jwtToken,
          username: user.username,
        }
      }
    }
  } catch (err) {
    return {
      props: {
        authenticated: false
      }
    }
  }

}

export default Home;